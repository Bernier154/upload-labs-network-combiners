on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Read manifest.json version_number
        id: manifest
        run: |
          VERSION=$(jq -r '.version_number' manifest.json)
          NAME=$(jq -r '.name' manifest.json)
          NAMESPACE=$(jq -r '.namespace' manifest.json)
          ZIP_NAME="${NAMESPACE}-${NAME}.zip"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        run: |
          VERSION=${{ steps.manifest.outputs.version }}
          echo "Checking for existing release v$VERSION"
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release zip (if not exists)
        id: create_zip
        if: steps.check_release.outputs.exists == 'false'
        run: |
          VERSION=${{ steps.manifest.outputs.version }}
          ZIP_NAME=${{ steps.manifest.outputs.zip_name }}
          NAMESPACE=${{ steps.manifest.outputs.namespace }}
          NAME=${{ steps.manifest.outputs.name }}
          echo "Creating zip for version v$VERSION"
          
          mkdir -p release
          mkdir -p mods-unpacked
          mkdir -p mods-unpacked/$NAMESPACE-$NAME
          
          rsync -av --exclude='.git' \
                    --exclude='.github' \
                    --exclude='.vscode' \
                    --exclude='image.png' \
                    --exclude='README.md' \
                    --exclude='.gitignore' \
                    --exclude='release' \
                    --exclude='mods-unpacked' \
                    ./ mods-unpacked/$NAMESPACE-$NAME

          # Create the zip containing the mods-unpacked folder
          zip -r "release/$ZIP_NAME" mods-unpacked
          # Cleanup temporary folder
          rm -rf mods-unpacked
          echo "zip_path=release/$ZIP_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          VERSION=${{ steps.manifest.outputs.version }}
          ZIP_PATH=${{ steps.create_zip.outputs.zip_path }}
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "Auto-generated release from manifest.json" \
            "$ZIP_PATH"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
